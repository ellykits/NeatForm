apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

jacoco {
    toolVersion = "0.8.3"
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    // Keep the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {

        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.google.android.material:material:1.0.0'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    //Presentation and core layer
    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support:recyclerview-v7:28.0.0'
    api 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'com.android.support:design:28.0.0'
    api 'com.jakewharton.timber:timber:4.7.1'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.10'
    api 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1"
    api 'org.jeasy:easy-rules-core:3.3.0'
    api 'org.jeasy:easy-rules-mvel:3.3.0'
    api 'com.google.code.gson:gson:2.8.5'
    api 'com.jaredrummler:material-spinner:1.3.1'
    //Data layer
    api "android.arch.persistence.room:runtime:$room_version"
    api "android.arch.persistence.room:rxjava2:$room_version"

    annotationProcessor "android.arch.persistence.room:compiler:$room_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation "org.robolectric:shadows-multidex:3.8"
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation "android.arch.persistence.room:testing:$room_version"
    testImplementation "io.mockk:mockk:$mockKVersion"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
repositories {
    mavenCentral()
}

//For publishing dependency to GitHub package
def githubProperties = new Properties()

//Read the github properties content
githubProperties.load(new FileInputStream(rootProject.file("local.properties")))

def getVersionName = { ->
    return "1.0.1"
}

def getArtifactId = { ->
    return "neat-form-core"
}

publishing {
    publications {
        bar(MavenPublication) {
            groupId 'com.nerdstone'
            artifactId getArtifactId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /**
             * Configure path of the package repository on Github using the GITHUB_USER_ID and
             * Git Repository
             */
            url = uri("https://maven.pkg.github.com/ellykits/neat-form")
            credentials {
                /** get credentials from github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN otherwise
                 ** Set env variable GPR_USER & GPR_API_KEY**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}